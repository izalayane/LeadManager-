import { google } from 'googleapis';
import { getGoogleAuth } from './googleAuth';

export default async function handler(req, res) {
    console.log("ðŸŸ¢ [LOG] - Iniciando a exclusÃ£o de lead");

    if (req.method !== 'POST') {
        return res.status(405).json({ message: 'MÃ©todo nÃ£o permitido' });
    }

    const { idClient } = req.body;
    console.log("ðŸŸ¢ [LOG] - ID recebido para exclusÃ£o:", idClient);

    if (!idClient) {
        console.log("ðŸ›‘ [ERRO] - ID do lead invÃ¡lido:", idClient);
        return res.status(400).json({ message: 'ID do lead invÃ¡lido' });
    }

    try {
        console.log("ðŸŸ¢ [LOG] - Autenticando no Google Sheets...");
        const auth = await getGoogleAuth();
        const sheets = google.sheets({ version: 'v4', auth });
        console.log("âœ… [LOG] - AutenticaÃ§Ã£o bem-sucedida!");

        // ðŸ”¹ Obtendo os dados atuais para encontrar a linha correta
        console.log("ðŸŸ¢ [LOG] - Buscando os dados da planilha...");
        const sheetInfo = await sheets.spreadsheets.values.get({
            spreadsheetId: process.env.SPREADSHEET_ID,
            range: "A:H" // Garante que estamos buscando todas as colunas necessÃ¡rias
        });

        const rows = sheetInfo.data.values;
        if (!rows || rows.length === 0) {
            console.log("ðŸ›‘ [ERRO] - Nenhum dado encontrado na planilha!");
            return res.status(404).json({ message: 'Nenhum dado encontrado' });
        }

        // ðŸ”¹ Encontrar a linha correta pelo ID do cliente
        const rowIndex = rows.findIndex(row => row[0] === idClient);
        if (rowIndex === -1) {
            console.log("ðŸ›‘ [ERRO] - ID nÃ£o encontrado na planilha:", idClient);
            return res.status(404).json({ message: 'Lead nÃ£o encontrado' });
        }

        console.log("ðŸŸ¢ [LOG] - Excluindo a linha correta na posiÃ§Ã£o:", rowIndex + 1);

        // ðŸ”¹ Pegando o sheetId correto
        const sheetMetadata = await sheets.spreadsheets.get({ spreadsheetId: process.env.SPREADSHEET_ID });
        const sheetId = sheetMetadata.data.sheets[0].properties.sheetId;

        // ðŸ”¹ Excluir a linha correta
        await sheets.spreadsheets.batchUpdate({
            spreadsheetId: process.env.SPREADSHEET_ID,
            requestBody: {
                requests: [{
                    deleteDimension: {
                        range: {
                            sheetId: sheetId,
                            dimension: 'ROWS',
                            startIndex: rowIndex, // Agora exclui a linha certa!
                            endIndex: rowIndex + 1
                        }
                    }
                }]
            }
        });

        console.log("âœ… [LOG] - Lead excluÃ­do com sucesso!");
        return res.status(200).json({ status: 'ok' });

    } catch (error) {
        console.error("ðŸ›‘ [ERRO] - Falha ao excluir lead:", error);
        return res.status(500).json({ message: 'Erro ao excluir lead', error: error.message || error });
    }
};
